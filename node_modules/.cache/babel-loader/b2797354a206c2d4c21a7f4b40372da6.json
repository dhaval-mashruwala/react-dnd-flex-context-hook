{"ast":null,"code":"var _jsxFileName = \"/Users/dhavalmashruwala/me/sample/react-dnd-flex-context-hook/src/pages/dashboard/components/LeftSection/LeftSection.js\";\nimport React, { useContext } from \"react\";\nimport PropTypes from 'prop-types';\nimport Tweet from '../../components/Tweet';\nimport Loader from '../../components/Loader';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { GlobalContext } from '../../../../store'; // this is left section of application which contains search and tweets results\n\nexport default class LeftSection extends React.Component {\n  /* Render the component */\n  render() {\n    const [searchText, setSearchText] = useState('');\n    const [error, setError] = useState({\n      emptyQuery: false\n    });\n    const [message, setMessage] = useState('');\n    const [loading, setloading] = useState(false);\n    const {\n      tweets,\n      fetchTweets\n    } = useContext(GlobalContext); // this will be called when user hits seach and call to fetch tweets will be handled\n\n    onSearch = async () => {\n      const {\n        searchText,\n        error\n      } = this.state;\n\n      if (searchText) {\n        this.setState({\n          error,\n          loading: true\n        });\n        setloading(true);\n        await this.props.fetchTweets(searchText);\n        error.emptyQuery = false;\n        this.setState({\n          error,\n          loading: false\n        });\n      } else {\n        error.emptyQuery = true;\n        this.setState({\n          error,\n          message: 'search query cannot be empty'\n        });\n      }\n    };\n\n    _renderTweets = tweets => {\n      return tweets.map((tweet, index) => /*#__PURE__*/React.createElement(Draggable, {\n        key: tweet.id,\n        draggableId: String(tweet.id),\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      }, (provided, snapshot) => /*#__PURE__*/React.createElement(Tweet, {\n        provided: provided,\n        photo: tweet.user && tweet.user.biggerProfileImageURL,\n        name: tweet.user && tweet.user.name,\n        screenName: tweet.user && tweet.user.screenName,\n        text: tweet.text,\n        date: tweet.createdAt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    _renderLoader = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loader-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }));\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, error.emptyQuery && message && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 43\n      }\n    }, message), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"search-box\",\n      placeholder: \"Search Twitter\",\n      type: \"text\",\n      onChange: e => setSearchText(e.currentTarget.value),\n      value: searchText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"search-btn\",\n      onClick: this.onSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"left-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n      ref: provided.innerRef,\n      className: \"tweets-list-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, loading ? this._renderLoader() : null, !loading && tweets.length ? this._renderTweets(tweets) : null, provided.placeholder, !loading && !tweets.length ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"no-tweets\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, \" You have no tweets. Try search for it.\")) : null))));\n  }\n\n}\nLeftSection.propTypes = {\n  fetchTweets: PropTypes.func,\n  tweets: PropTypes.array\n};","map":{"version":3,"sources":["/Users/dhavalmashruwala/me/sample/react-dnd-flex-context-hook/src/pages/dashboard/components/LeftSection/LeftSection.js"],"names":["React","useContext","PropTypes","Tweet","Loader","Droppable","Draggable","GlobalContext","LeftSection","Component","render","searchText","setSearchText","useState","error","setError","emptyQuery","message","setMessage","loading","setloading","tweets","fetchTweets","onSearch","state","setState","props","_renderTweets","map","tweet","index","id","String","provided","snapshot","user","biggerProfileImageURL","name","screenName","text","createdAt","_renderLoader","e","currentTarget","value","innerRef","length","placeholder","propTypes","func","array"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,qBAArC;AACA,SAASC,aAAT,QAA8B,mBAA9B,C,CACA;;AACA,eAAe,MAAMC,WAAN,SAA0BR,KAAK,CAACS,SAAhC,CAA0C;AAEvD;AACAC,EAAAA,MAAM,GAAG;AACP,UAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAC,EAAD,CAA5C;AACA,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,CAAC;AAAEG,MAAAA,UAAU,EAAE;AAAd,KAAD,CAAlC;AACA,UAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,UAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,UAAM;AAAEQ,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAA0BrB,UAAU,CAACM,aAAD,CAA1C,CALO,CAOP;;AACFgB,IAAAA,QAAQ,GAAG,YAAY;AACrB,YAAM;AAAEZ,QAAAA,UAAF;AAAcG,QAAAA;AAAd,UAAwB,KAAKU,KAAnC;;AACA,UAAIb,UAAJ,EAAiB;AACf,aAAKc,QAAL,CAAc;AAACX,UAAAA,KAAD;AAAQK,UAAAA,OAAO,EAAE;AAAjB,SAAd;AACAC,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAM,KAAKM,KAAL,CAAWJ,WAAX,CAAuBX,UAAvB,CAAN;AACAG,QAAAA,KAAK,CAACE,UAAN,GAAmB,KAAnB;AACA,aAAKS,QAAL,CAAc;AAACX,UAAAA,KAAD;AAAQK,UAAAA,OAAO,EAAE;AAAjB,SAAd;AACD,OAND,MAMO;AACLL,QAAAA,KAAK,CAACE,UAAN,GAAmB,IAAnB;AACA,aAAKS,QAAL,CAAc;AAACX,UAAAA,KAAD;AAAQG,UAAAA,OAAO,EAAE;AAAjB,SAAd;AACD;AACF,KAZD;;AAcAU,IAAAA,aAAa,GAAIN,MAAD,IAAY;AAC1B,aAAOA,MAAM,CAACO,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,kBAChB,oBAAC,SAAD;AACE,QAAA,GAAG,EAAED,KAAK,CAACE,EADb;AAEE,QAAA,WAAW,EAAEC,MAAM,CAACH,KAAK,CAACE,EAAP,CAFrB;AAGE,QAAA,KAAK,EAAED,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,CAACG,QAAD,EAAWC,QAAX,kBACC,oBAAC,KAAD;AACE,QAAA,QAAQ,EAAED,QADZ;AAEE,QAAA,KAAK,EAAEJ,KAAK,CAACM,IAAN,IAAcN,KAAK,CAACM,IAAN,CAAWC,qBAFlC;AAGE,QAAA,IAAI,EAAEP,KAAK,CAACM,IAAN,IAAcN,KAAK,CAACM,IAAN,CAAWE,IAHjC;AAIE,QAAA,UAAU,EAAER,KAAK,CAACM,IAAN,IAAcN,KAAK,CAACM,IAAN,CAAWG,UAJvC;AAKE,QAAA,IAAI,EAAET,KAAK,CAACU,IALd;AAME,QAAA,IAAI,EAAEV,KAAK,CAACW,SANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADK,CAAP;AAiBD,KAlBD;;AAoBAC,IAAAA,aAAa,GAAG,mBACd;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;;AAUE,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG3B,KAAK,CAACE,UAAN,IAAoBC,OAApB,iBAA+B;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyBA,OAAzB,CADlC,eAEE;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,WAAW,EAAC,gBAFd;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,QAAQ,EAAGyB,CAAD,IAAK9B,aAAa,CAAC8B,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAJ9B;AAKE,MAAA,KAAK,EAAEjC,UALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eASE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,OAAO,EAAE,KAAKY,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,CADA,eAcA,oBAAC,SAAD;AAAW,MAAA,WAAW,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,CAACU,QAAD,EAAWC,QAAX,kBACC;AACE,MAAA,GAAG,EAAED,QAAQ,CAACY,QADhB;AAEE,MAAA,SAAS,EAAC,uBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGG1B,OAAO,GAAC,KAAKsB,aAAL,EAAD,GAAsB,IAHhC,EAIG,CAACtB,OAAD,IAAYE,MAAM,CAACyB,MAAnB,GAA4B,KAAKnB,aAAL,CAAmBN,MAAnB,CAA5B,GAAwD,IAJ3D,EAKGY,QAAQ,CAACc,WALZ,EAMG,CAAC5B,OAAD,IAAY,CAACE,MAAM,CAACyB,MAApB,gBACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADF,CADD,GAIG,IAVN,CAFF,CAdA,CADF,CADF;AAmCD;;AA1FsD;AA4FzDtC,WAAW,CAACwC,SAAZ,GAAwB;AACtB1B,EAAAA,WAAW,EAAEpB,SAAS,CAAC+C,IADD;AAEtB5B,EAAAA,MAAM,EAAEnB,SAAS,CAACgD;AAFI,CAAxB","sourcesContent":["import React, {useContext} from \"react\";\nimport PropTypes from 'prop-types';\nimport Tweet from '../../components/Tweet';\nimport Loader from '../../components/Loader';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { GlobalContext } from '../../../../store'\n// this is left section of application which contains search and tweets results\nexport default class LeftSection extends React.Component {\n\n  /* Render the component */\n  render() {\n    const [searchText, setSearchText] = useState('')\n    const [error, setError] = useState({ emptyQuery: false })\n    const [message, setMessage] = useState('')\n    const [loading, setloading] = useState(false)\n    const { tweets, fetchTweets } = useContext(GlobalContext);\n\n    // this will be called when user hits seach and call to fetch tweets will be handled\n  onSearch = async () => {\n    const { searchText, error } = this.state;\n    if( searchText ) {\n      this.setState({error, loading: true});\n      setloading(true)\n      await this.props.fetchTweets(searchText);\n      error.emptyQuery = false;\n      this.setState({error, loading: false});\n    } else {\n      error.emptyQuery = true;\n      this.setState({error, message: 'search query cannot be empty'});\n    }\n  }\n\n  _renderTweets = (tweets) => {\n    return tweets.map((tweet, index)=>(\n      <Draggable\n        key={tweet.id}\n        draggableId={String(tweet.id)}\n        index={index}>\n        {(provided, snapshot) => (\n          <Tweet\n            provided={provided} \n            photo={tweet.user && tweet.user.biggerProfileImageURL}\n            name={tweet.user && tweet.user.name}\n            screenName={tweet.user && tweet.user.screenName}\n            text={tweet.text}\n            date={tweet.createdAt}\n          />\n        )}\n      </Draggable>\n     ))\n  }\n\n  _renderLoader = () => (\n    <div className='loader-container'>\n      <Loader></Loader>\n      <Loader></Loader>\n      <Loader></Loader>\n      <Loader></Loader>\n      <Loader></Loader>\n    </div>\n  )\n\n    return (\n      <div className='left-section'>\n        <div className='wrapper'>\n        <div className='search-wrapper'>\n          {error.emptyQuery && message && <span className='error'>{message}</span>}\n          <input \n            className='search-box' \n            placeholder='Search Twitter' \n            type='text'\n            onChange={(e)=>setSearchText(e.currentTarget.value)} \n            value={searchText}\n          />\n          <button className='search-btn' onClick={this.onSearch}>\n            <i className='fa fa-search'></i>\n          </button>\n        </div>\n        <Droppable droppableId=\"left-section\">\n        {(provided, snapshot) => (\n          <div \n            ref={provided.innerRef}\n            className='tweets-list-container'>\n            {loading?this._renderLoader():null}\n            {!loading && tweets.length ? this._renderTweets(tweets): null}\n            {provided.placeholder}\n            {!loading && !tweets.length ? (\n              <div className='no-tweets'>\n                <span> You have no tweets. Try search for it.</span>\n              </div>\n              ):null}\n          </div>\n        )}\n        </Droppable>\n        </div>\n      </div>\n    );\n  }\n}\nLeftSection.propTypes = {\n  fetchTweets: PropTypes.func,\n  tweets: PropTypes.array\n}\n"]},"metadata":{},"sourceType":"module"}