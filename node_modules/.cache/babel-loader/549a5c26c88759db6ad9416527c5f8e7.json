{"ast":null,"code":"var _jsxFileName = \"/Users/dhavalmashruwala/me/sample/react-dnd-flex-context-hook/src/pages/dashboard/components/LeftSection/LeftSection.js\";\nimport React, { useContext, useState } from \"react\";\nimport Tweet from '../../components/Tweet';\nimport Loader from '../../components/Loader';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { GlobalContext } from '../../../../store'; // this is left section of application which contains search and tweets results\n\n/* Render the component */\n\nconst LeftSection = () => {\n  const [searchText, setSearchText] = useState('');\n  const [error, setError] = useState({\n    emptyQuery: false\n  });\n  const [message, setMessage] = useState('');\n  const [loading, setloading] = useState(false);\n  const {\n    tweets,\n    fetchTweets\n  } = useContext(GlobalContext); // this will be called when user hits seach and call to fetch tweets will be handled\n\n  const onSearch = async () => {\n    if (searchText) {\n      setloading(true);\n      await fetchTweets(searchText);\n      error.emptyQuery = false;\n      setError(error);\n      setloading(false);\n    } else {\n      error.emptyQuery = true;\n      setError(error);\n      setMessage('search query cannot be empty');\n    }\n  };\n\n  const _renderTweets = tweets => {\n    return tweets.map((tweet, index) => /*#__PURE__*/React.createElement(Draggable, {\n      key: tweet.id,\n      draggableId: String(tweet.id),\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(Tweet, {\n      provided: provided,\n      photo: tweet.user && tweet.user.biggerProfileImageURL,\n      name: tweet.user && tweet.user.name,\n      screenName: tweet.user && tweet.user.screenName,\n      text: tweet.text,\n      date: tweet.createdAt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  const _renderLoader = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loader-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, error.emptyQuery && message && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 41\n    }\n  }, message), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"search-box\",\n    placeholder: \"Search Twitter\",\n    type: \"text\",\n    onChange: e => setSearchText(e.currentTarget.value),\n    value: searchText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"search-btn\",\n    onClick: onSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"left-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n    ref: provided.innerRef,\n    className: \"tweets-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, loading ? _renderLoader() : null, !loading && tweets.length ? _renderTweets(tweets) : null, provided.placeholder, !loading && !tweets.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"no-tweets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \" You have no tweets. Try search for it.\")) : null))));\n};\n\nexport default LeftSection;","map":{"version":3,"sources":["/Users/dhavalmashruwala/me/sample/react-dnd-flex-context-hook/src/pages/dashboard/components/LeftSection/LeftSection.js"],"names":["React","useContext","useState","Tweet","Loader","Droppable","Draggable","GlobalContext","LeftSection","searchText","setSearchText","error","setError","emptyQuery","message","setMessage","loading","setloading","tweets","fetchTweets","onSearch","_renderTweets","map","tweet","index","id","String","provided","snapshot","user","biggerProfileImageURL","name","screenName","text","createdAt","_renderLoader","e","currentTarget","value","innerRef","length","placeholder"],"mappings":"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","sourcesContent":["import React, { useContext, useState} from \"react\";\nimport Tweet from '../../components/Tweet';\nimport Loader from '../../components/Loader';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { GlobalContext } from '../../../../store'\n// this is left section of application which contains search and tweets results\n/* Render the component */\nconst LeftSection = () => {\n  const [searchText, setSearchText] = useState('')\n  const [error, setError] = useState({ emptyQuery: false })\n  const [message, setMessage] = useState('')\n  const [loading, setloading] = useState(false)\n  const { tweets, fetchTweets } = useContext(GlobalContext);\n\n  // this will be called when user hits seach and call to fetch tweets will be handled\nconst onSearch = async () => {\n  if( searchText ) {\n    setloading(true)\n    await fetchTweets(searchText);\n    error.emptyQuery = false;\n    setError(error)\n    setloading(false)\n  } else {\n    error.emptyQuery = true;\n    setError(error)\n    setMessage('search query cannot be empty')\n  }\n}\n\nconst _renderTweets = (tweets) => {\n  return tweets.map((tweet, index)=>(\n    <Draggable\n      key={tweet.id}\n      draggableId={String(tweet.id)}\n      index={index}>\n      {(provided, snapshot) => (\n        <Tweet\n          provided={provided} \n          photo={tweet.user && tweet.user.biggerProfileImageURL}\n          name={tweet.user && tweet.user.name}\n          screenName={tweet.user && tweet.user.screenName}\n          text={tweet.text}\n          date={tweet.createdAt}\n        />\n      )}\n    </Draggable>\n   ))\n}\n\nconst _renderLoader = () => (\n  <div className='loader-container'>\n    <Loader></Loader>\n    <Loader></Loader>\n    <Loader></Loader>\n    <Loader></Loader>\n    <Loader></Loader>\n  </div>\n)\n\n  return (\n    <div className='left-section'>\n      <div className='wrapper'>\n      <div className='search-wrapper'>\n        {error.emptyQuery && message && <span className='error'>{message}</span>}\n        <input \n          className='search-box' \n          placeholder='Search Twitter' \n          type='text'\n          onChange={(e)=>setSearchText(e.currentTarget.value)} \n          value={searchText}\n        />\n        <button className='search-btn' onClick={onSearch}>\n          <i className='fa fa-search'></i>\n        </button>\n      </div>\n      <Droppable droppableId=\"left-section\">\n      {(provided, snapshot) => (\n        <div \n          ref={provided.innerRef}\n          className='tweets-list-container'>\n          {loading? _renderLoader() : null}\n          {!loading && tweets.length ? _renderTweets(tweets): null}\n          {provided.placeholder}\n          {!loading && !tweets.length ? (\n            <div className='no-tweets'>\n              <span> You have no tweets. Try search for it.</span>\n            </div>\n            ):null}\n        </div>\n      )}\n      </Droppable>\n      </div>\n    </div>\n  );\n}\n\nexport default LeftSection;"]},"metadata":{},"sourceType":"module"}