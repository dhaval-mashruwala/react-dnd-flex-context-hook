{"ast":null,"code":"var _jsxFileName = \"/Users/dhavalmashruwala/me/sample/react-dnd-flex-context-hook/src/pages/dashboard/components/LeftSection/LeftSection.js\";\nimport React, { useContext } from \"react\";\nimport PropTypes from 'prop-types';\nimport Tweet from '../../components/Tweet';\nimport Loader from '../../components/Loader';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { GlobalContext } from '../../../../store'; // this is left section of application which contains search and tweets results\n\nexport default class LeftSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSearch = async () => {\n      const {\n        searchText,\n        error\n      } = this.state;\n\n      if (searchText) {\n        this.setState({\n          error,\n          loading: true\n        });\n        await this.props.fetchTweets(searchText);\n        error.emptyQuery = false;\n        this.setState({\n          error,\n          loading: false\n        });\n      } else {\n        error.emptyQuery = true;\n        this.setState({\n          error,\n          message: 'search query cannot be empty'\n        });\n      }\n    };\n\n    this._renderTweets = tweets => {\n      return tweets.map((tweet, index) => /*#__PURE__*/React.createElement(Draggable, {\n        key: tweet.id,\n        draggableId: String(tweet.id),\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }, (provided, snapshot) => /*#__PURE__*/React.createElement(Tweet, {\n        provided: provided,\n        photo: tweet.user && tweet.user.biggerProfileImageURL,\n        name: tweet.user && tweet.user.name,\n        screenName: tweet.user && tweet.user.screenName,\n        text: tweet.text,\n        date: tweet.createdAt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this._renderLoader = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loader-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }));\n\n    this.state = {\n      searchText: '',\n      message: '',\n      error: {\n        emptyQuery: false\n      }\n    };\n  } // this will be called when user hits seach and call to fetch tweets will be handled\n\n\n  /* Render the component */\n  render() {\n    const {\n      searchText,\n      error,\n      message,\n      loading\n    } = this.state;\n    const {\n      tweets\n    } = useContext(GlobalContext);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, error.emptyQuery && message && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 43\n      }\n    }, message), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"search-box\",\n      placeholder: \"Search Twitter\",\n      type: \"text\",\n      onChange: e => this.setState({\n        searchText: e.currentTarget.value\n      }),\n      value: searchText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"search-btn\",\n      onClick: this.onSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"left-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n      ref: provided.innerRef,\n      className: \"tweets-list-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, loading ? this._renderLoader() : null, !loading && tweets.length ? this._renderTweets(tweets) : null, provided.placeholder, !loading && !tweets.length ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"no-tweets\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, \" You have no tweets. Try search for it.\")) : null))));\n  }\n\n}\nLeftSection.propTypes = {\n  fetchTweets: PropTypes.func,\n  tweets: PropTypes.array\n};","map":{"version":3,"sources":["/Users/dhavalmashruwala/me/sample/react-dnd-flex-context-hook/src/pages/dashboard/components/LeftSection/LeftSection.js"],"names":["React","useContext","PropTypes","Tweet","Loader","Droppable","Draggable","GlobalContext","LeftSection","Component","constructor","props","onSearch","searchText","error","state","setState","loading","fetchTweets","emptyQuery","message","_renderTweets","tweets","map","tweet","index","id","String","provided","snapshot","user","biggerProfileImageURL","name","screenName","text","createdAt","_renderLoader","render","e","currentTarget","value","innerRef","length","placeholder","propTypes","func","array"],"mappings":"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","sourcesContent":["import React, {useContext} from \"react\";\nimport PropTypes from 'prop-types';\nimport Tweet from '../../components/Tweet';\nimport Loader from '../../components/Loader';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { GlobalContext } from '../../../../store'\n// this is left section of application which contains search and tweets results\nexport default class LeftSection extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      message: '',\n      error: {\n        emptyQuery: false \n      }\n    };\n  }\n  // this will be called when user hits seach and call to fetch tweets will be handled\n  onSearch = async () => {\n    const { searchText, error } = this.state;\n    if( searchText ) {\n      this.setState({error, loading: true});\n      await this.props.fetchTweets(searchText);\n      error.emptyQuery = false;\n      this.setState({error, loading: false});\n    } else {\n      error.emptyQuery = true;\n      this.setState({error, message: 'search query cannot be empty'});\n    }\n  }\n\n  _renderTweets = (tweets) => {\n    return tweets.map((tweet, index)=>(\n      <Draggable\n        key={tweet.id}\n        draggableId={String(tweet.id)}\n        index={index}>\n        {(provided, snapshot) => (\n          <Tweet\n            provided={provided} \n            photo={tweet.user && tweet.user.biggerProfileImageURL}\n            name={tweet.user && tweet.user.name}\n            screenName={tweet.user && tweet.user.screenName}\n            text={tweet.text}\n            date={tweet.createdAt}\n          />\n        )}\n      </Draggable>\n     ))\n  }\n\n  _renderLoader = () => (\n    <div className='loader-container'>\n      <Loader></Loader>\n      <Loader></Loader>\n      <Loader></Loader>\n      <Loader></Loader>\n      <Loader></Loader>\n    </div>\n  )\n\n\n  /* Render the component */\n  render() {\n    const { searchText, error, message, loading } = this.state;\n    const { tweets } = useContext(GlobalContext);\n    return (\n      <div className='left-section'>\n        <div className='wrapper'>\n        <div className='search-wrapper'>\n          {error.emptyQuery && message && <span className='error'>{message}</span>}\n          <input \n            className='search-box' \n            placeholder='Search Twitter' \n            type='text'\n            onChange={(e)=>this.setState({searchText:e.currentTarget.value})} \n            value={searchText}\n          />\n          <button className='search-btn' onClick={this.onSearch}>\n            <i className='fa fa-search'></i>\n          </button>\n        </div>\n        <Droppable droppableId=\"left-section\">\n        {(provided, snapshot) => (\n          <div \n            ref={provided.innerRef}\n            className='tweets-list-container'>\n            {loading?this._renderLoader():null}\n            {!loading && tweets.length ? this._renderTweets(tweets): null}\n            {provided.placeholder}\n            {!loading && !tweets.length ? (\n              <div className='no-tweets'>\n                <span> You have no tweets. Try search for it.</span>\n              </div>\n              ):null}\n          </div>\n        )}\n        </Droppable>\n        </div>\n      </div>\n    );\n  }\n}\nLeftSection.propTypes = {\n  fetchTweets: PropTypes.func,\n  tweets: PropTypes.array\n}\n"]},"metadata":{},"sourceType":"module"}